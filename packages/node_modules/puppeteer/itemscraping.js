const puppeteer = require('puppeteer-extra');
const StealthPlugin = require('puppeteer-extra-plugin-stealth');
puppeteer.use(StealthPlugin());

(async () => {
  const targetUrl = process.argv[2];
  const titleSelector = process.argv[3];
  const priceSelector = process.argv[4];

  if (!targetUrl || !titleSelector || !priceSelector) {
    console.error('Usage: node combined.js <URL> <titleSelector> <priceSelector>');
    process.exit(1);
  }

  const browser = await puppeteer.launch({ headless: true });
  const page = await browser.newPage();

  await page.setExtraHTTPHeaders({
    'Accept-Language': 'en-US,en;q=0.9'
  });

  await page.setUserAgent(
    'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/114.0.0.0 Safari/537.36'
  );

  await page.goto(targetUrl, { waitUntil: 'networkidle2' });
  await page.waitForSelector(titleSelector);
  await page.waitForSelector(priceSelector);

  const result = await page.evaluate((titleSel, priceSel) => {
    const titles = Array.from(document.querySelectorAll(titleSel)).map(el =>
      el.textContent.trim().replace(/\u00A0/g, ' ')
    );

    const prices = Array.from(document.querySelectorAll(priceSel)).map(el => {
      const span = el.querySelector('span');
      if (span && span.nextSibling && span.nextSibling.nodeType === Node.TEXT_NODE) {
        const match = span.nextSibling.textContent.match(/[\d,.]+/);
        return match ? match[0].replace(',', '.') : 'N/A';
      } else {
        const match = el.textContent.match(/[\d,.]+/);
        return match ? match[0].replace(',', '.') : 'N/A';
      }
    });

    return { items: titles, prices };
  }, titleSelector, priceSelector);

  // Output 
  console.log(JSON.stringify(result, null, 2));

  await browser.close();
})();