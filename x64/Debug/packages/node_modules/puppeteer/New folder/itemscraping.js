const puppeteer = require('puppeteer-extra');
const StealthPlugin = require('puppeteer-extra-plugin-stealth');
puppeteer.use(StealthPlugin());

(async () => {
  const targetUrl = process.argv[2];
  const linkSelector = process.argv[3];
  const variationSelector = process.argv[4]
  const titleSelector = process.argv[5];
  const priceSelector = process.argv[6];

  if (!targetUrl || !linkSelector || !variationSelector || !titleSelector || !priceSelector) {
    console.error('Usage: node combined.js <URL> <linkSelector> <variationSelector> <titleSelector> <priceSelector>');
    process.exit(1);
  }

  const browser = await puppeteer.launch({ headless: false });
  const page = await browser.newPage();

  await page.setExtraHTTPHeaders({
    'Accept-Language': 'en-US,en;q=0.9'
  });

  await page.setUserAgent(
    'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/114.0.0.0 Safari/537.36'
  );

  await page.goto(targetUrl, { waitUntil: 'networkidle2' });
  
  await page.waitForSelector(linkSelector);
  const itemUrls = await page.evaluate((sel) => {
	  return Array.from(document.querySelectorAll(sel))
	  .map(el => el.href || el.getAttribute('href'))
	  .filter(Boolean)
	  .map(link => link.startsWith('https') ? link : new URL(link, location.origin).href);
  }, linkSelector);
  
  const results = [];
  
  for (const url of itemUrls) {
	  const itemPage = await browser.newPage();
	  try {
		  await itemPage.goto(url, { waitUntil: 'networkidle0', timeout: 20000 });
		  await itemPage.waitForSelector(titleSelector, { timeout: 10000 });
		  await itemPage.waitForSelector(priceSelector, { timeout: 10000 });
		  await itemPage.waitForSelector(variationSelector, { timeout: 10000 });
		  
		  const variationButtons = await itemPage.$$(variationSelector + ' a');
		  
		  const itemResults = [];
		  
		  if(variationButtons.length === 0) {
			  //No variations		  
			  const data = await itemPage.evaluate((titleSel, priceSel) => {
			  const titleEl = document.querySelector(titleSel);
			  const priceEl = document.querySelector(priceSel);
			  
			  const title = titleEl ? titleEl.textContent.trim().replace(/\u00A0/g, ' ') : 'N/A';
			  let price = 'N/A';
			  
			  if(priceEl) {
				  const span = priceEl.querySelector('span');
				  if (span && span.nextSibling && span.nextSibling.nodeType === Node.TEXT_NODE) {
					const match = span.nextSibling.textContent.match(/[\d,.]+/);
					price = match ? match[0].replace(',', '.') : 'N/A';
				} else {
					const match = priceEl.textContent.match(/[\d,.]+/);
					price =  match ? match[0].replace(',', '.') : 'N/A';
					}
				}
			
				return { title, price };
			  }, titleSelector, priceSelector);
		
			itemResults.push({variation: 'default', ...data});
			} else {
				//Loop over all variations
				for (let i = 0; i < variationButtons.length; i++)
				{
					await variationButtons[i].click();
					
					//await itemPage.waitUntil('networkidle0')
					
					const data = await itemPage.evaluate((titleSel, priceSel) => {
					const titleEl = document.querySelector(titleSel);
					const priceEl = document.querySelector(priceSel);
			  
					const title = titleEl ? titleEl.textContent.trim().replace(/\u00A0/g, ' ') : 'N/A';
					let price = 'N/A';
			  
					if(priceEl) {
						const span = priceEl.querySelector('span');
						if (span && span.nextSibling && span.nextSibling.nodeType === Node.TEXT_NODE) {
							const match = span.nextSibling.textContent.match(/[\d,.]+/);
							price = match ? match[0].replace(',', '.') : 'N/A';
						} else {
							const match = priceEl.textContent.match(/[\d,.]+/);
							price =  match ? match[0].replace(',', '.') : 'N/A';
							}
						}
			
						return { title, price };
					}, titleSelector, priceSelector);
					
					const variationLabel = await itemPage.evaluate((sel, idx) => {
						const buttons = document.querySelectorAll(sel);
						return buttons[idx]?.textContent.trim() || `variation-${idx+1}`;
					}, variationSelector, i);
			
					itemResults.push({ variation: variationLabel, ...data });
				}
		
				results.push({ url, variations: itemResults });
			}
	  } catch (err) {
		  console.warn(`Failed to Scrape &{url}: ${err.message}`);
	  } finally {
		  await itemPage.close();
	  }
  }
  
  console.log(JSON.stringify(results.map(r => ({
	  product:r.url,
	  variations: r.variations
    })), 
   null, 
   2
   )
  );

  await browser.close();
})();

/*
await page.waitForSelector(titleSelector);
  await page.waitForSelector(priceSelector);

  const result = await page.evaluate((titleSel, priceSel) => {
    const titles = Array.from(document.querySelectorAll(titleSel)).map(el =>
      el.textContent.trim().replace(/\u00A0/g, ' ')
    );

    const prices = Array.from(document.querySelectorAll(priceSel)).map(el => {
      const span = el.querySelector('span');
      if (span && span.nextSibling && span.nextSibling.nodeType === Node.TEXT_NODE) {
        const match = span.nextSibling.textContent.match(/[\d,.]+/);
        return match ? match[0].replace(',', '.') : 'N/A';
      } else {
        const match = el.textContent.match(/[\d,.]+/);
        return match ? match[0].replace(',', '.') : 'N/A';
      }
    });

    return { items: titles, prices };
  }, titleSelector, priceSelector);
  */